; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *pro synth_bfits, in_file, out_file, num_out, out_times, out_rates, out_errs;; Procedure to write a synthetic BFITS file 'out_file' with num_out records,;based upon 'in_file'. Some minimal error checking is done, but the caller;should check to see that the 'in_file' is actually present, and that the;number of energy channels in the out_rates and out_errs arrays match that of;the template file.;INPUTS:;	STRING   in_file: Input BFITS filename; file is used as the template.;	STRING  out_file: Output BFITS filename; file is based upon the ;                         in_file template with num_out rows of data.;	INTEGER  num_out: Number of output rows, to be inserted in NAXIS2 of;                         the output data table extension.;	REAL   out_times: 2 X num_out array of times to be output in out_file.;	REAL   out_rates: nchan X num_out array of rates to be output.;	REAL    out_errs: nchan X num_out array of errors in rates to be output.;header = headfits(in_file)filetype = sxpar(header, 'FILETYPE')IF filetype NE 'BATSE BURST SPECTRA' THEN BEGIN   PRINT, '*** Wrong type of FITS file: ', filetype, ' ***'   RETURN   ENDIFfile_temp = STRUPCASE(out_file)brack_pos = STRPOS(file_temp, '/', /REVERSE_SEARCH)IF brack_pos NE 0 THEN BEGIN   file_temp = STRMID(file_temp, brack_pos+1, 999)   ENDIFdot_pos = STRPOS(file_temp, '.')IF dot_pos NE 0 THEN BEGIN   file_temp = STRMID(file_temp, 0, dot_pos)   ENDIFfxaddpar, header, 'OBJECT', file_tempold_trig = sxpar(header, 'BATSE_TR')fxaddpar, header, 'BATSE_TR', 100, 'Synthetic burst only: NOT a trigger'fxaddpar, header, 'FILE-ID', file_temp, 'Name of FITS file'get_date, todayfxaddpar, header, 'DATE', today, 'FITS file creation date (dd/mm/yy)'fxaddpar, header, 'MNEMONIC', 'SYNTH_BFITS 1.0', 'Program creating this file'fxaddpar, header, 'COMMENT', 'This file consists of synthetic time-sequenced spectral data'fxwrite, out_file, header; Calibration table remains unmodified...fxbopen, unit_in, in_file, 1, chn_dets = sxpar(ch, 'NAXIS2')n_cols = sxpar(ch, 'TFIELDS')fxbcreate, unit_out, out_file, chFOR outer = 1, n_cols DO BEGIN   FOR inner = 1, n_dets DO BEGIN      fxbread, unit_in, dummy, outer, inner      fxbwrite, unit_out, dummy, outer, inner      ENDFOR   ENDFORfxbfinish, unit_outfxbclose, unit_infxbopen, unit_in, in_file, 2, dhn_bins = sxpar(dh, 'NAXIS2')n_cols = sxpar(dh, 'TFIELDS')fxaddpar, dh, 'NOTE', 'Synthetic Trigger: ' + STRTRIM(STRING(old_trig), 2)IF n_elements(num_out) NE 0 THEN BEGIN    ; We are writing synthetic data   fxaddpar, dh, 'NAXIS2', num_out   fxbcreate, unit_out, out_file, dh   FOR inner = 1, num_out DO BEGIN      fxbwrite, unit_out, out_times(*, inner-1), 1, inner      fxbwrite, unit_out, out_rates(*, inner-1), 2, inner      fxbwrite, unit_out, out_errs(*, inner-1), 3, inner      ENDFOR   ENDIF $ELSE BEGIN                              ; For testing, need alternate path   fxbcreate, unit_out, out_file, dh   FOR outer = 1, n_cols DO BEGIN      fxbread, unit_in, dummy, outer      FOR inner = 1, n_bins DO BEGIN         fxbwrite, unit_out, dummy(*, inner-1), outer, inner         ENDFOR      ENDFOR   ENDELSEfxbfinish, unit_outfxbclose, unit_inend; pro synth_bfits; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *