@fit_functions@fit_functions_flares@calc_eisopro grbz_plot  readcol,'~/iLobster/2014_proposal/redshift_accum_data_all.txt',z,t0s,t500s,t1000s,t1500s,t2000s,t2500s,t3000s,t3500s,t4000s,t4500s,t5000s,All_detected_withoutGTM,intrinsic,GTM,All_detected_withGTM,comment='#',delim=' '  g=mrdfits('~/Swift/swift_grb_properties.fits',1)  w=where(g.z gt 0,n)  g=g[w]  s=sort(g.z)  g=g[s]  x=fltarr(n)  y=fltarr(n)  for i=0,n-1 do begin      y[i]=n-i     x[i]=g[i].z  endfor   swiftlen=9.33  xrange=[0,10]  yrange=[0.1,1e2];  plot,[0,14],yrange,/nodata,xtitle='Redshift z!L0!N',ytitle='z>z!L0!N GRB rate (yr !U-1!N)',/ylog,yrange=yrange;  polyfill,[5,xrange[1],xrange[1],5,5],yrange[[0,0,1,1,0]],color=!yellow;  oplot,x,y/swiftlen,psym=10  p=plot(xrange,yrange,/nodata,xrange=xrange,yrange=yrange,/histogram,ytitle='Cumulative (> z) GRB rate [yr !U-1!N]',/ylog,ytickformat='loglabels',xtitle='Redshift z',font_size=14)  p1=polygon([5,xrange[1],xrange[1],5,5],yrange[[0,0,1,1,0]],fill_color='light cyan',transparency=80,/data)  p2=plot(x,y/swiftlen,xrange=xrange,yrange=yrange,/histogram,/overplot)  p3=plot(z,all_detected_withgtm*0.3,xrange=xrange,yrange=yrange,symbol='.',/overplot,color='blue',linestyle='none',sym_size=5,sym_filled=1)  t1=text(5.3,39,'Targets for JWST',/data,font_size=12)  a1=arrow([5,7],[30,30],/data,thick=2)  t2=text(1.9,6,'Swift GRBs with Measured Redshift',orientation=-39,/data,font_size=14)  t3=text(3,25,'Predicted Redshifts for ISS-Lobster GRBs',/data,color='blue',orientation=-35,font_size=14);  p4=plot(z,t0s*0.3,xrange=xrange,yrange=yrange,symbol='.',/overplot,color='green',linestyle='none',sym_size=5,sym_filled=1);  p5=plot(z,[t500s+t1000s+t1500s+t2000s+t2500s+t3000s+t3500s+t4000s+t4500s+t5000s]*0.3,xrange=xrange,yrange=yrange,symbol='.',/overplot,color='orange',linestyle='none',sym_size=5,sym_filled=1);  p6=plot(z,gtm*0.3,xrange=xrange,yrange=yrange,symbol='.',/overplot,color='red',linestyle='none',sym_size=5,sym_filled=1);  t4=text(0.5,0.7,'prompt',color='green',/data);  t4=text(0.5,0.5,'afterglow',color='orange',/data);  t4=text(0.5,0.35,'gtm',color='red',/data)  p.save,'~/iLobster/2014_proposal/grbz_plot.pdf',/transparent,/landscape  p.close  ;;; add "Swift GRBs with Measured z"  ;;; add "Targets for JWST" shaded region  stop  returnend pro gtm_grbs  g=mrdfits('~/Fermi/GBM_GRB_Catalog.fits',1)  b=mrdfits('~/Swift/batcat.fits',1)  ;; get iLobster peak Band flux in 15-150 keV  evtoerg=1.60217646d-12  kevtoerg=evtoerg*1d3  emin=15.  emax=150.  if emax gt 1e3 then x=10d else x=1.  e=findgen((emax-emin)/x+1.)*x+emin  pflux=fltarr(n_elements(g))  for i=0,n_elements(g)-1 do begin      enorm=100.     k=g[i].pflx_band_ampl     alpha=g[i].pflx_band_alpha     epeak=g[i].pflx_band_epeak     e0=epeak/(2.+alpha)     beta=g[i].pflx_band_beta     p=[k,alpha,e0,beta,enorm]     f=band(e,p);k,alpha,e0,beta,enorm)     eflux=int_tabulated(e,f*e,/double)*kevtoerg     pflux[i]=eflux;     sbol=int_tabulated(e,f*e,/double)*kevtoerg*(stop-start)  endfor   begplot,name='~/Swift/BAT_GBM_peak_flux.ps',/land,/color,font='helvetica'  !p.multi=[0,1,2]  w=where(pflux gt 1e-10 and g.t90 gt 2.);  pflux=pflux[w]  plothist,alog10(pflux[w]),bin=0.1,xtitle='log 15-150 keV peak flux [erg cm!U2!N s!U-1!N]',title='Long GRBs'  legend,['GBM','BAT'],box=0,/top,/right,textcolor=[!p.color,!red]  w=where(b.pflux_15_150 gt 0 and g.t90 gt 2.)  plothist,alog10(b[w].pflux_15_150),/overplot,color=!red,bin=0.1  w=where(pflux gt 1e-10 and g.t90 le 2.)  plothist,alog10(pflux[w]),bin=0.1,title='Short GRBs',xtitle='log 15-150 keV peak flux [erg cm!U2!N s!U-1!N]'  legend,['GBM','BAT'],box=0,/top,/right,textcolor=[!p.color,!red]  w=where(b.pflux_15_150 gt 0 and g.t90 le 2.)  plothist,alog10(b[w].pflux_15_150),/overplot,color=!red,bin=0.1  !p.multi=0  endplot  spawn,'ps2pdf ~/Swift/BAT_GBM_peak_flux.ps ~/Swift/BAT_GBM_peak_flux.pdf'  stop  returnend pro transient_plot  readcol,'~/iLobster/Lobster_2010/Proposal/soderberg.csv',time,lum  time=[time[0:19],time[24:*]]  lum=[lum[0:19],lum[24:*]]  n=n_elements(time)/4  trans=create_struct('type1','','type2','','type3','','dist1',0d,'dist2',0d,'lum',dblarr(4),$                      'time',dblarr(4),'flux',dblarr(4),'color','','tcolor','',$                      'xoff',0.,'yoff',0.,'ang',0.);  begplot,name='~/iLobster/transient_plot.eps',/land,/color,/encap,font='helvetica'    n=13  trans=replicate(trans,n)  trans.tcolor='black'  i=0  trans[i].type1='LGRBs'  trans[i].dist1=lumdist(3,h=72,omega_m=0.27,lambda=0.73)*1d6;  trans[i].lum=[51,45,43,48]  trans[i].flux=[1d-6,5d-10,5d-12,1d-9]  trans[i].time=[1,1d4,1d4,1]  trans[i].color='pink'  trans[i].ang=-1  trans[i].xoff=0.  trans[i].yoff=5e2  i=1  trans[i].type1='sGRBs'; (GWs)'  trans[i].type2='(GWs)'  trans[i].dist1=lumdist(0.5,h=72,omega_m=0.27,lambda=0.73)*1d6;  trans[i].flux=[1e-7,1d-11,1d-12,1e-9]  trans[i].flux=[8e-7,1d-11,1d-12,5e-9]  trans[i].time=[0.1,1d4,1d4,0.1]  trans[i].color='sea green'  trans[i].ang=-1  trans[i].xoff=0.05  trans[i].yoff=4e3;  i=2;  trans[i].type1='Sub-Luminous GRBs';  trans[i].type2='       GRBs';  trans[i].dist1=lumdist(0.1,h=72,omega_m=0.27,lambda=0.73)*1e6;  trans[i].lum=lum[24:27];  trans[i].time=time[24:27];  trans[i].color=!green;  trans[i].yoff=0.02;  trans[i].xoff=-10  ;  i=3;  trans[i].type1='Magnetar';  trans[i].type2='Flares';  trans[i].dist1=15e3 ;;pc;  trans[i].flux=[1d-6,1d-6,1d-8,1d-8];  trans[i].time=[0.05,0.1,0.1,0.05];  trans[i].yoff=1.;  trans[i].xoff=-0.02;  trans[i].color=!cyan  i=8  trans[i].type1='Thermonuclear Bursts'  trans[i].dist1=10e3 ;;pc  trans[i].lum=[39,39,38,38]  trans[i].time=[3,1e4,1e4,3]  trans[i].xoff=5  trans[i].yoff=0.5  trans[i].color='magenta'  i=3  trans[i].type1='  Tidal'  trans[i].type2='Disruptions';  trans[i].type3='  tion'  trans[i].dist1=200e6 ;;pc  trans[i].flux=[2.1e-10,5e-11,5.2e-13,2.1e-12]  trans[i].time=[100,1e6,1e6,100];time[28:31]  trans[i].color='yellow'  trans[i].yoff=0.8  trans[i].xoff=2e4  trans[i].ang=-0.01  i=9  trans[i].type1='SN Ibc/II Breakout'  trans[i].dist1=50e6 ;;pc  trans[i].lum=[44,45,44.5,43.5];lum[20:23]  trans[i].time=time[20:23]  trans[i].color='turquoise'  trans[i].ang=12  trans[i].yoff=0.08  trans[i].xoff=2    i=4  trans[i].type1='Flare'  trans[i].type2='Stars'  trans[i].dist1=100. ;;pc  trans[i].flux=[4d-10,4d-10,1d-12,1d-12]  trans[i].time=time[40:43]  trans[i].color='red'  trans[i].yoff=0.03  trans[i].xoff=60;  i=8;  trans[i].type1='SFXT';  trans[i].dist1=2e3;  trans[i].lum=[35,35,33,33];  trans[i].time=[1e3,1e4,1e4,1e3];  trans[i].yoff=0.05;  trans[i].color=!dodgerblue  i=6  trans[i].type1=' SN Ia'  trans[i].type2='Breakout'  trans[i].dist1=50e6 ;;pc  trans[i].lum=[44,44,43,43]  trans[i].time=[1e-1,5e3,5e3,1e-1];[100,2d3,2d3,100]  trans[i].yoff=0.8  trans[i].xoff=0.1  trans[i].color='purple'  trans[i].tcolor='white'  i=10  trans[i].type1='Classical Novae'  trans[i].dist1=3e3 ;;pc  trans[i].lum=lum[32:35]  trans[i].time=time[32:35]  trans[i].color='orange'  trans[i].ang=18  trans[i].xoff=5e3  trans[i].yoff=0.008;  i=11;  trans[i].type1='AGN';  trans[i].dist1=lumdist(0.01,h=72,omega_m=0.27,lambda=0.73)*1d6;  trans[i].dist2=lumdist(0.05,h=72,omega_m=0.27,lambda=0.73)*1d6;  trans[i].lum=[43,43,41,41];  trans[i].time=[1e4,6e5,6e5,1e4];  trans[i].color=!dodgerblue;  trans[i].xoff=1e4;  trans[i].yoff=5;  trans[i].ang=-0.01;  i=12;  trans[i].type1='Blazars';  trans[i].dist1=lumdist(0.1,h=72,omega_m=0.27,lambda=0.73)*1d6;  trans[i].dist2=lumdist(1,h=72,omega_m=0.27,lambda=0.73)*1d6;  trans[i].lum=[46.5,46.5,44.5,44.5];;  trans[i].flux=[1.1e-10,1.1e-12,6.2e-14,6.2e-12];  trans[i].time=[7e4,6e5,6e5,7e4];  trans[i].color=!blue;  trans[i].xoff=0;  trans[i].yoff=1;  trans[i].ang=-0.01    ;; blazars, agn, long grbs, short grbs;  trans[11].type1='Long GRBs';  trans[11].dist=lumdist(3.)*1e3;  trans[11].lum=;  trans[11].time=[1e-2,1e3,1e3,1e-2,1e-2]  pc2cm=3.08568025d18    trans.dist1=trans.dist1*pc2cm  trans.dist2=trans.dist2*pc2cm  ;Integration time    Flux in 0.3-6 keV [erg/cm2/s] ;  lobtime=[1,2,5,10,20,50,100,200,400];  lobflux=[0.7347E-08,0.3847E-08,0.2304E-08,0.1310E-08,0.6966E-09,0.3351E-09,0.2234E-09,0.1396E-09,0.9077E-10];  lobflux=[7.3e-9,3.5e-9,1.5e-9,1.1e-9,6.2e-10,2.4e-10,1.5e-10,7.0e-11,4.9e-11];  lobtime=[10,20,50,100,200,400,1000,2000,1e4,2e4,4e4,8e4];  lobflux=[9.29e-10,4.64e-10,1.86e-10,9.29e-11,4.64e-11,2.61e-11,1.33e-11,7.71e-12,2.7e-12,1.88e-12,1.27e-12,1e-12];8.47e-13] ;4sigma  readcol,'~/iLobster/2014_proposal/lobster_sensitivity_0.3_5.dat',time, bcount, mcount, crabflux, grbflux, hgrbflux  readcol,'~/iLobster/2014_proposal/lobster_sensitivity_0.3_5_Ptak.dat',time2,bcount2,mcount2,grbflux2  lobtime=time  lobflux=grbflux;  lobcounts=lobflux/2.5e-9*time;  c=248.;  g=3.;  R90= c*(mcount^2/(mcount+g*bcount))^(-1/2.);  fp=10^(-5.-findgen(10));  tp=interpol(time,grbflux,fp);  r90p=interpol(r90,time,tp)  ;stop;   lobflux=[9.29e-10,4.64e-10,1.86e-10,1.28e-10,7.22e-11,4.01e-11,2.07e-11,1.24e-11,4.38e-12,2.90e-12,1.82e-12,1.01e-12] ;; 6 sigma  nl=n_elements(lobtime);  !x.margin=[14,0]  xrange=[1e-1,1e7]  p=plot([1e-1,1e7],[1e-14,1e-5],/nodata,xrange=xrange,yrange=[1e-14,1e-5],xtitle='Timescale (s)',ytitle='0.3-5 keV Flux (erg cm!U-2!N s!U-1!N)',/xlog,/ylog,xmajor=9,ymajor=10,xminor=9,yminor=9);,xtickname=replicate(' ',9),yticks=9)  x=0  square=intarr(n)  square[*]=1  w=where(trans.ang ne 0)  square[w]=0  ;  t1=[0.01,0.02,0.05,0.1,0.2,0.5]  t1=[0.1,0.2,0.5,1.]  nt1=n_elements(t1)  t2=[4e5,1e6,2e6,1e7]  nt2=n_elements(t2)  time=[t1,lobtime,t2]  time3=[t1,time2,t2]  flux=[lobflux[0]/(t1/lobtime[0]),lobflux,lobflux[nl-1]/sqrt(t2[0]/lobtime[nl-1]),replicate(1e-12,3)];,lobflux[nl-1]/sqrt(t2/lobtime[nl-1])]  flux2=[lobflux[0]/(t1/lobtime[0]),lobflux,lobflux[nl-1]/sqrt(t2/lobtime[nl-1])]  flux3=[grbflux2[0]/(t1/time2[0]),grbflux2,grbflux2[nl-1]/sqrt(t2/time2[nl-1])];  flux2=10^interpol(alog10(lobflux),alog10(lobtime),alog10(time));  oplot,lobtime,lobflux,psym=1  p2=polygon([time,1e7,xrange[0],time[0]],[flux,1e-14,1e-14,flux[0]],color='grey',/data,fill_color='grey',transparency=50)  t2=text(1e4,1e-6,'WFI Detectability',/data)  asym=[0,2,1,3]  for i=0,n-1 do begin     if square[i] eq 1 then begin         xsq=[0,1,1,0,0]         ysq=[0,0,2,2,0]      endif else begin         xsq=[0,1,2,3,0]        ysq=[0,1,2,3,0]     endelse      t=trans[i].time[xsq]     if trans[i].flux[0] eq 0 then trans[i].flux=10^trans[i].lum/(4.*!pi*trans[i].dist1^2.)     if trans[i].dist2 ne 0 then begin         trans[i].flux[0]=10^trans[i].lum[0]/(4.*!pi*trans[i].dist1^2.)        trans[i].flux[1]=10^trans[i].lum[2]/(4.*!pi*trans[i].dist1^2.)        trans[i].flux[2]=10^trans[i].lum[2]/(4.*!pi*trans[i].dist2^2.)        trans[i].flux[3]=10^trans[i].lum[0]/(4.*!pi*trans[i].dist2^2.)     endif      l=trans[i].flux[ysq]     p3=polygon(t,l,color=trans[i].color,/data,fill_color=trans[i].color,transparency=30)     xx=t[0]*1.1;(t[1]-t[0])/8.+t[0]     yy=(l[2]-l[1])/2.+l[1]     print,xx,yy     t3=text(xx+trans[i].xoff,yy*trans[i].yoff,trans[i].type1,color=trans[i].tcolor,orientation=trans[i].ang,/data)     t4=text(xx+trans[i].xoff,yy/3.*trans[i].yoff,trans[i].type2,color=trans[i].tcolor,orientation=trans[i].ang,/data)     t5=text(xx+trans[i].xoff,yy/6.*trans[i].yoff,trans[i].type3,color=trans[i].tcolor,orientation=trans[i].ang,/data);     k=get_kbrd(10);     if k eq 's' then stop     x=x+4  endfor    i=5  xx=trans[i].time[0]  yy=(trans[i].flux[2]-trans[i].flux[1])/2.+trans[i].flux[1]  t6=text(xx+trans[i].xoff,yy*trans[i].yoff,trans[i].type1,color='black',orientation=trans[i].ang,/data)  t7=text(xx+trans[i].xoff,yy/3.*trans[i].yoff,trans[i].type2,color='black',orientation=trans[i].ang,/data)  p4=plot(time,flux2,linestyle=2,/over,/current);,color=!grey50  p4=plot(time3,flux3,linestyle=2,/over,/current,color='green');,color=!grey50  p5=plot([6e5,1e7],[1e-12,1e-12],linestyle=1,thick=4,/over,/current);  oplot,t2,replicate(1e-12,nt2),line=1;  oplot,time,flux2,line=1,color=!grey20  p6=plot([1e-2,1e7],[1e-14,1e-14],/over,/current)  p7=plot([1e7,1e7],[1e-14,1e-2],/over,/current);  p8=plot(time,r90,linestyle=3,/over,/current);  axis,yaxis=0,yticks=9,yminor=9,ytickname=replicate(' ',10);  axis,yaxis=1,yticks=9,yminor=9,ytickname=replicate(' ',10);  axis,xaxis=0,xticks=8,xtickformat='loglabels',xminor=9;  axis,xaxis=1,xticks=8,xtickname=replicate(' ',9),xminor=9  t8=text(5e2,1e-13,'WFI 4'+!tsym.sigma+' Sensitivity',/data)  a=arrow([5e3,5e3],[8e-13,5e-12],/data,thick=3)  t9=text(5e5,3e-12,'Confusion',/data)  t9=text(5e5,1.4e-12,'    Limit',/data)  t10=text(0.15,3e-14,'Minimum Integration Time = 2 s',/data)  p.save,'~/iLobster/2014_proposal/transient_plot.png'  p.close;  endplot;  spawn,'convert ~/iLobster/transient_plot.eps ~/iLobster/transient_plot.pdf'stopreturnend pro shb_plot  grb=mrdfits('~/Swift/swift_grb_properties.fits',1)  ;; dir='~/stuff_for_people/Nora/'  ;; readcol,dir+'comblist.csv',stuff,format='(a)',delim='#'  ;; nstuff=n_elements(stuff)  ;; grbs=strarr(nstuff) & mission=grbs & ee=grbs  ;; for i=0,nstuff-1 do begin  ;;    chunks=str_sep(stuff[i],',')  ;;    grbs[i]=chunks[0]  ;;    if strmid(grbs[i],0,1)*1. gt 1 then grbs[i]='0'+grbs[i]  ;;    mission[i]=chunks[1]  ;;    ee[i]=chunks[2]  ;; endfor   ;; match,'GRB'+strtrim(grbs,2),strtrim(grb.name,2),m1,m2  ;; dont_match,'GRB'+strtrim(grbs,2),strtrim(grb.name,2),dm1,dm2  ;; grb=grb[m2]  w=where(grb.t90 le 2. and grb.t90 gt 0. and grb.grb ne 'GRB100628A' and grb.grb ne 'GRB140311B')  grb=grb[w]  begplot,name='~/iLobster/2014_proposal/sgrb_plot.eps',/land,/color,font='helvetica'  !x.margin=[5,1]  !y.margin=[2,0]  xrange=[10,1e6]  yrange=[1e-13,1e-5];  yrange=[1e-15,1e-7]  plot,[10,1e6],[1e-13,1e-5],/xlog,/ylog,/nodata,xtitle='Time (s)',ytitle='0.3-5.0 keV Flux (erg cm!U-2!N s!U-1!N)',xrange=xrange,yrange=yrange,/xsty,/ysty,charsize=2,yticks=8,yminor=9,title='X-ray afterglows of sGRBs scaled to 440 Mpc' ;,title='X-ray afterglows real flux'  t=15.*60.  t2=t+40.*60.  thresh=1e-11  mthresh=25./8*3.5e-10;  lobtime=[10,20,50,100,200,400,1000,2000,1e4,2e4,4e4,8e4];  lobflux=[9.29e-10,4.64e-10,1.86e-10,9.29e-11,4.64e-11,2.61e-11,1.33e-11,7.71e-12,2.7e-12,1.88e-12,1.27e-12,8.47e-13] ;; 4 sigma;  lobflux=[9.29e-10,4.64e-10,1.86e-10,1.28e-10,7.22e-11,4.01e-11,2.07e-11,1.24e-11,4.38e-12,2.90e-12,1.82e-12,1.01e-12] ;; 6 sigma  ;  readcol,'~/iLobster/2014_proposal/lobster_sensitivity_0.4_2.dat',time, bcount, mcount, crabflux, grbflux, hgrbflux;  readcol,'~/iLobster/2014_proposal/lobster_sensitivity_0.3_5.dat',time, bcount, mcount, crabflux, grbflux, hgrbflux  readcol,'~/iLobster/2014_proposal/lobster_sensitivity_0.3_5_Ptak.dat',time,bcount,mcount,grbflux  lobtime=time  lobflux=grbflux  f10=interpol(lobflux,lobtime,10.)  f50=interpol(lobflux,lobtime,50.)  f500=interpol(lobflux,lobtime,500.)  f2000=interpol(lobflux,lobtime,2000.)  lobcounts=lobflux/2.5e-9*time  c=248.  g=3.  R90= c*(mcount^2/(mcount+g*bcount))^(-0.5)  tp=[10.,500.,2000.]  r90p=interpol(r90,time,tp)/60.  ;; nl=n_elements(lobtime)  ;; lobtime=[lobtime,1e5,1e6,2e6,1e7]  ;; lobflux=[lobflux,replicate(1e-12,4)] ;,lobflux[nl-1]/sqrt(lobtime[nl:*]/lobtime[nl-1])]  ;; w=where(lobtime ge 10 and lobtime le 1e6)  ;; lobtime=lobtime[w]  ;; lobflux=lobflux[w]  nl=n_elements(lobtime)  axis,xrange=xrange,/xsty,xtickname=replicate(' ',7)  axis,xaxis=1,xrange=xrange,/xsty,xtickname=replicate(' ',7)  axis,yaxis=0,yrange=yrange,/ysty,ytickname=replicate(' ',9),yticks=8,yminor=9  mpc2cm=3.08568025d24  dist200=440*mpc2cm  eng=dindgen(98)/10.+0.3  de=0.1  plotsym,1,3  detect=intarr(n_elements(grb))  mdetect=intarr(n_elements(grb))  f100=fltarr(n_elements(grb))  f1000=fltarr(n_elements(grb))  mos=strarr(n_elements(grb))  s=findgen(100)/10.+1.  times=[s*10,s*100,s*1000,s*1e4,s*1e5,s*1e6]  for i=0,n_elements(grb)-1 do begin;     dir='~/GRBs/'+strtrim(grb[i].name,2)+'/';     if exist(dir+'UL_specfits.fits') and exist(dir+'PCCURVE.qdp') then begin ;        lc=lcout2fits(dir+'lc_newout_phil.txt');        spec=mrdfits(dir+'UL_specfits.fits',1)     w=where(times ge grb[i].tstart and times le grb[i].tlastdet,nw)     time=times[w]     f=call_function(strtrim(grb[i].model,2),time,grb[i].p)     z=grb[i].z;        color2=!red;        color=!firebrick     color=!p.color     if z le 0. then begin         z=0.7        color=!p.color;!grey70;           color=!white;!blue;           color=!royalblue     endif      dist=lumdist(z,h0=71,lambda=0.73,omega_m=0.27)     dist=dist*mpc2cm;        r=grb[i].cfratio*4.*!pi*dist^2     z1=1.+z        ;;; need to convert from 0.3-10 to 0.3-5 keV     conv=total(pow(eng[0:47],[1.,grb[i].phind])*de)/total(pow(eng,[1.,grb[i].phind])*de)          r=grb[i].cfratio*conv*dist^2/dist200^2/kcorr(z,[1.,grb[i].phind],/pow);        w=where(lc.src_rate_err ne 0,nw)     if nw gt 1 then begin        oplot,time/z1,f*r,color=color;if f[0]*r lt 2e-11 then stop;           lcfile=dir+'lc_fit_out_idl_int8.dat';           if not exist(lcfile) then lcfile=dir+'lc_fit_out_idl_int7.dat';           read_lcfit,lcfile,pnames,p;           mo=fit_models(pnames,p)        mo=strtrim(grb[i].model,2) ;mo;           if mo ne '' then begin ;              tmp=execute('yfit='+mo+'(lc[w].time,p)')        f100[i]=call_function(mo,100.,grb[i].p)*r        f1000[i]=call_function(mo,1000.,grb[i].p)*r     endif ;           oplot,lc[w].time/z1,yfit*r,color=color;  endif ;        w=where(lc.src_rate_err ne 0 and lc.time gt t and lc.src_rate*r gt thresh,nw)     w=where(time gt t and f*r gt thresh,nw)     if nw gt 0 then detect[i]=1     w=where(time gt 45.*60. and f*r gt mthresh,nw);        w=where(lc.src_rate_err ne 0 and lc.time gt 45.*60. and lc.src_rate*r gt mthresh,nw)     if nw gt 0 then mdetect[i]=1;     endif else detect[i]=3  ;;; no actual light curve  endfor  ;;; add bursts with only 1 detection  bursts=['GRB050813','GRB060502B','GRB061217','GRB070729','GRB100206A','GRB101224A','GRB130822A','GRB140320A']  plotsym,0,1,/fill  for i=0,n_elements(bursts)-1 do begin     lc=lcout2fits(dir='~/GRBs/'+bursts[i])     z=0.7     dist=lumdist(z,h0=71,lambda=0.73,omega_m=0.27)     dist=dist*mpc2cm     z1=1.+z     conv=total(pow(eng[0:47],[1.,2.])*de)/total(pow(eng,[1.,2.])*de)     r=4e-11*conv*dist^2/dist200^2/kcorr(z,[1.,2.],/pow)     plots,lc[0].time/z1,lc[0].src_rate*r,color=!grey70,psym=8     oplot,[lc[0].tstart,lc[0].tstop]/z1,[lc[0].src_rate,lc[0].src_rate]*r,color=!grey70     oplot,[lc[0].time,lc[0].time]/z1,[lc[0].src_rate-lc[0].src_rate_err,lc[0].src_rate+lc[0].src_rate_err]*r,color=!grey70     print,bursts[i],lc[0].src_rate*r  endfor ;  oplot,lobtime,lobflux,line=2  !p.charthick=1  !p.charsize=2  c=!p.color  c=!orange    oplot,[11,11],[yrange[0],6e-6],thick=20,color=c  xyouts,12.,3e-6,'Start of WFI scan from GTM trigger',color=c;  arrow,11,2e-6,25.*60.,2e-6,/data,thick=20,hsize=!D.X_SIZE /40.,/solid,color=c  c=!blue  oplot,[3.*60,3.*60],[yrange[0],2e-7],thick=20,color=c  xyouts,3.*60+60.,1e-7,'LIGO skymap available',color=c;  xyouts,8.5e3,1e-7,'hemisphere',color=c;  arrow,3.*60,6e-8,2000.,6e-8,/data,thick=20,hsize=!D.X_SIZE / 40.,/solid,color=c  c=!cyan  oplot,[45.*60,45.*60],[yrange[0],2e-8],thick=20,color=c  xyouts,45.*60+1000.,1e-8,'Max Time to Observation',color=c;  xyouts,8.5e3,1e-7,'hemisphere',color=c;  arrow,45.*60,6e-9,2e4,6e-9,/data,thick=20,hsize=!D.X_SIZE / 40.,/solid,color=c  !p.charsize=1.8  c=!red  oplot,[10,1e6],[f10,f10],thick=15,color=c,line=5;  xyouts,4.3e4,1.8e-9,'10 s Sensitivity',color=c  xyouts,8e3,1.8e-9,'R!L90!N<'+numdec(r90p[0],1)+"'     "+'10 s Sensitivity',color=c;  oplot,[50,1e6],[f50,f50],thick=15,color=c,line=5;  polyfill,[10.1,575,575,10.1,10.1],[lobflux[2],lobflux[2],7e-11,7e-11,lobflux[2]],color=!c;  polyfill,[4e4,7e5,7e5,4e4,4e4],[6e-10,6e-10,2.5e-10,2.5e-10,6e-10],color=!white;  xyouts,4.3e4,3.5e-10,'50 s Sensitivity',color=c  oplot,[500,1e6],[f500,f500],thick=15,color=c,line=5;  xyouts,3.2e4,7e-11,'500 s Sensitivity',color=c  xyouts,8e3,7e-11,'R!L90!N<'+numdec(r90p[1],1)+"'   "+'500 s Sensitivity',color=c  oplot,[2000,1e6],[f2000,f2000],thick=15,color=c,line=5;  polyfill,[550,1e6,1e6,550,550],[lobflux[7],lobflux[7],5e-12,5e-12,lobflux[7]],color=!c;  polyfill,[3e4,8e5,8e5,3e4,3e4],[4e-11,4e-11,1.7e-11,1.7e-11,4e-11],color=!white;  xyouts,3e4,2.2e-11,'2000 s Sensitivity',color=c  xyouts,8e3,2.2e-11,'R!L90!N<'+numdec(r90p[2],1)+"' "+'2000 s Sensitivity',color=c;  legend,['Known Redshift','Assumed Median z=0.7'],/top,/right,box=0,textcolor=[!p.color,color]    endplot  spawn,'ps2pdf ~/iLobster/2014_proposal/sgrb_plot.eps ~/iLobster/2014_proposal/sgrb_plot.pdf'  help,detect  nd=n_elements(detect)  w0=where(detect eq 0,nw0)  w1=where(detect eq 1,nw1)  w2=where(detect eq 3,nw2)  print,nd,nw0,nw1,nw2  n=nd-nw2  print,n,nw1*1./n    stop  returnendpro rotate_square,ang,xxp,yyp,xc=xc,yc=yc  if n_elements(yc) eq 0 then yc=0.  if n_elements(xc) eq 0 then xc=0.  c=indgen(16)  rc=reverse(indgen(15))+1  b=replicate(15,16)  yy=[-b,-b,-rc,c,b,b,rc,-c]  xx=[-rc,c,b,b,rc,-c,-b,-b]/cos((yy+yc)*!dtor)  theta=atan(yy*1./xx*1.)  t=theta*!radeg  w=where(xx le 0 and yy lt 0) ;; 3rd quadrant  t[w]=t[w]+180  w=where(xx ge 0 and yy lt 0) ;; 4th quadrant  t[w]=t[w]+360  w=where(xx le 0 and yy gt 0) ;; 2nd quadrant  t[w]=t[w]+180  w=where(xx gt 0 and yy eq 0)  t[w]=0  w=where(xx lt 0 and yy eq 0)  t[w]=180  w=where(xx eq 0 and yy gt 0)  t[w]=90  w=where(xx eq 0 and yy lt 0)  t[w]=270  theta=t*!dtor  rad=sqrt(xx^2+yy^2);  rad=r*sqrt(2.)  xxp=sin(theta+ang*!dtor)*rad+xc  yyp=cos(theta+ang*!dtor)*rad+yc  if ang eq 0 then begin      xxp=xx+xc     yyp=yy+yc  endif   w=where(yyp lt -90,nw)  if nw gt 0 then yyp[w]=-180-yyp[w]  w=where(yyp gt 90,nw)  if nw gt 0 then yyp[w]=180-yyp[w]  w=where(xxp lt 0 or xxp gt 360,nw)  if nw gt 0 then xxp[w]=xxp[w] mod 360  ;  map_set,/ait,/grid;  oplot,xxp,yyp,color=!red  returnendpro wfi_sky_survey  suncon=45.  mooncon=15.  m=map('Mollweide',label_show=0,grid_longitude=30,grid_latitude=30,linestyle=1,thick=3)  jdcnv,2020,1,7,0.0,jd  sunpos,jd,sunra,sundec  moonpos,jd,moonra,moondec;  p1=symbol(sunra,sundec,'circle',sym_size=1,sym_color='gold',/data,sym_fill_color='gold',/sym_filled);  p1=symbol(moonra,moondec,'circle',sym_size=1,sym_color='navy',/data,sym_fill_color='navy',/sym_filled)    ang=findgen(37)*10.  ;  p3=plot(sunra+suncon*sin(ang*!dtor),sundec+suncon*cos(ang*!dtor),color='gold',/data,/overplot,/current,thick=4);  p3=plot(moonra+mooncon*sin(ang*!dtor),moondec+mooncon*cos(ang*!dtor),color='navy',/data,/overplot,/current,thick=4);  x=[200,230,260,290,320,350,20,50,80,110];  y=[15,30,35,35,30,20,-15,-20,-25,-30]  ;; x=0.  ;; y=0.  ;; for i=15,361,30 do begin  ;;    for j=-75,75,30 do begin  ;;       x=[x,i]  ;;       y=[y,j]  ;;    endfor   ;; endfor   ;; x=x[1:*]  ;; y=y[1:*]  x=[indgen(12)*30.,indgen(10)*36.,indgen(5)*72.]  x=[x,x]  y=[replicate(14.,12),replicate(43.,10),replicate(74,5.)]  y=[y,-y]  expmap=fltarr(360,180);  a=arrow([0.03,0.11],[0.56,0.56],/current,thick=1.5,head_size=0.5)  for i=0,n_elements(x)-1 do begin      rotate_square,0.,xx,yy,xc=x[i],yc=y[i]     w=where(abs(xx) lt 360 and abs(yy) lt 90)     if i mod 2 eq 0 then color='green' else color='red'     p=plot(xx[w],yy[w],/overplot,color=color,thick=3);     p=polygon(xx[w],yy[w],/overplot,color=color,fill_color=color,transparency=50.,/data)     k=get_kbrd(10);     if i gt 20 then k=get_kbrd(10);     ryy=round(yy) & rxx=round(xx);     for j=min(ryy[w]),max(ryy[w]) do begin;        q=where(ryy[w] eq ryy[w[j]],nq);        if nq gt 0 then expmap[rxx[w[q]],ryy[w[j]]]=expmap[rxx[w[q]],ryy[w[j]]]+1.;     endfor ;     if i lt n_elements(x)-1 then $;        a=arrow(x[i:i+1],y[i:i+1],/data,/current,thick=1.5,head_size=0.5)  endfor ;  a=arrow([0.75,0.95],[0.385,0.385],/current,thick=1.5,head_size=0.5);  t=text(sunra-11,sundec+10,'Sun',/data,font_size=14);,color='gold');  t=text(moonra-10,moondec+18,'Moon',/data,font_size=14,color='navy')       m.save,'~/iLobster/2014_proposal/wfi_stares.png'  m.closestopreturnend pro ligo_cases  cd,'~/iLobster/simulations/LIGO_sims/2016_fits/'  files=file_search('*/bayestar*fits');  for i=0,n_elements(files)-1 do begin;     dir=str_sep(files[i],'/');     dir=dir[0];     read_fits_map,files[i],nside=nside;     mollview,files[i],map_out=map2,/silent,/nobar,titleplot=' ',png=dir[0]+'_lin.png',colt=20,coord='C';  endfor ;  stop;;; need to figure out nside, then use ang2pix_ring to go from;;; theta,phi to pixel coords, then can search inside area on map;;; probably should write out fits of map2, then don't have to redo  dir=''  readcol,'~/iLobster/simulations/LIGO_sims/2016_fits/2016_coinc.csv',eid,sid,network,snr,snrh,snrl,snrv,mass1,mass2,a50,a90,searched,la50,la90,lasearched,format='(l,l,a,f,f,f,f,f,f,f,f,f,f,f)',delim=',',/preserve  w2=where((strtrim(network,2) eq 'HL' or strtrim(network,2) eq 'HV' or strtrim(network,2) eq 'LV') and snr ge 14 and snr le 15) ; and a50 gt 500 and a50 lt 1000)  w3=where(strtrim(network,2) eq 'HLV' and snr ge 14 and snr le 15); and a50 lt 500 and a90 lt 500)  det2=eid[w2]  det3=eid[w3]  print,'2det'  colprint,eid[w2],network[w2],snr[w2],a50[w2],a90[w2]  print,'3det'  colprint,eid[w3],network[w3],snr[w3],a50[w3],a90[w3];  if not exist('2det_case.png') then mollview,'2det_case.fits',hmap2,map_out=map2,/silent,/log,/nobar,titleplot=' ',png='2det_case.png',colt=20;  if not exist('3det_case.png') then mollview,'3det_case.fits',hmap3,map_out=map3,/silent,/log,/nobar,titleplot=' ',png='3det_case.png',colt=20  n='714195'  det1file=ntostr(n)+'_lin.png'  det2file=ntostr(det2)+'_lin.png'  det3file=ntostr(det3)+'_lin.png';  n=['761066'];  det=n;  detfile=ntostr(n)+'_lin.png'  ndet='3'  det=det3  detfile=det3file  ;;; how to maximize probability distribution  ;;; calc prob for grid of tiles on sky  ;;; search around max prob region  ;; sky survey grid;  x=[indgen(12)*30.,indgen(10)*36.,indgen(5)*72.];  x=[x,x];  y=[replicate(14.,12),replicate(43.,10),replicate(74,5.)];  y=[y,-y]  for j=13,n_elements(det)-1 do begin      print,detfile[j]     w1=where(eid eq det[j])       w=where(files eq ntostr(eid[w1[0]])+'/bayestar.fits')     if not exist(detfile[j]) then mollview,files[w],map_out=map1,/silent,/nobar,titleplot=' ',colt=20,coord='C',png=dir+det[j]+'.png';'_lin.png'     read_fits_map,files[w],hmap,nside=nside     pix2ang_nest,nside,lindgen(n_elements(hmap)),theta,phi     ra=360.-phi*!radeg     dec=(0.5*!pi-theta)*!radeg     im=image(detfile[j],margin=0.0,image_dimensions=[800,520])     m=map('Mollweide',label_show=0,grid_longitude=30,grid_latitude=30,/overplot,/current,title=ndet+' GW Detector Localization',linestyle=1,thick=2)     ang=0     amap=hmap;     xx=fltarr(6) & yy=xx &      prob=fltarr(6);     pgrid0=fltarr(n_elements(x)) &      g=20     pgrid1=fltarr(g+1,g+1)     pgrid2=fltarr(91)     xx=fltarr(g+1,g+1) & yy=fltarr(g+1,g+1)     for i=0,g do begin        xx[i,*]=i*2-g;/2.        yy[*,i]=i*2-g;/2.     endfor      for z=0,5 do begin;        for i=0,n_elements(x)-1 do begin  ;;; set grid on sky, find highest probability;           wdet=where(ra ge (x[i]-15.*cos(y[i]*!dtor)) and ra le (x[i]+15.*cos(y[i]*!dtor)) and dec ge y[i]-15. and dec le y[i]+15.);           pgrid0[i]=total(amap[wdet])/total(hmap);        endfor ;        maxgrid=max(pgrid0,mgrid0)        maxpix=max(amap,mmax)        wnear=where(ra gt ra[mmax]-30 and ra lt ra[mmax]+30 and dec gt dec[mmax]-30 and dec lt dec[mmax]+30)        for i=0,90,5 do begin  ;;; rotate;           rotate_square,i,xxp,yyp,xc=x[mmax]+xx[mgrid1],yc=y[mmax]+yy[mgrid1]           rotate_square,i,xxp,yyp,xc=ra[mmax],yc=dec[mmax]           wdet=where_inside(xxp,yyp,ra[wnear],dec[wnear])           wdet=wnear[wdet];            wdet=where(ra ge (x[mgrid0]+xx[i,o]-15.*cos(y[mgrid0]*!dtor)) and ra le (x[mgrid0]+xx[i,o]+15.*cos(y[mgrid0]*!dtor)) and dec ge y[mgrid0]-15.+yy[i,o] and dec le y[mgrid0]+15.+yy[i,o])           pgrid2[i]=total(amap[wdet])/total(hmap)        endfor                    maxgrid=max(pgrid2,mgrid2)        ang=mgrid2        for i=0,g,2 do begin ;;; jiggle grid by 2 deg to find new max           for o=0,g,2 do begin              rotate_square,ang,xxp,yyp,xc=ra[mmax]+xx[i,o],yc=dec[mmax]+yy[i,o]              wdet=where_inside(xxp,yyp,ra[wnear],dec[wnear])              wdet=wnear[wdet];;              wdet=where(ra ge (ra[mmax]+xx[i,o]-15.*cos(dec[mmax]*!dtor)) and ra le (ra[mmax]+xx[i,o]+15.*cos(dec[mmax]*!dtor)) and dec ge (dec[mmax]-15.+yy[i,o]) and dec le (dec[mmax]+15.+yy[i,o]))              pgrid1[i,o]=total(amap[wdet])/total(hmap)           endfor ;;           if z eq 1 then p5=plot(ra[mmax]+xx[i,*],dec[mmax]+yy[i,*],symbol='dot',/current,/overplot,/data,linestyle='none')        endfor         maxgrid=max(pgrid1,mgrid1);        stop                rotate_square,ang,xxp,yyp,xc=ra[mmax]+xx[mgrid1],yc=dec[mmax]+yy[mgrid1];        rotate_square,ang,xxp,yyp,xc=ra[mmax],yc=dec[mmax]        wdet=where_inside(xxp,yyp,ra[wnear],dec[wnear])        wdet=wnear[wdet];        tilex=ra[mmax]+xx[mgrid1];        tiley=dec[mmax]+yy[mgrid1];        print,tilex,tiley;        p5=plot([ra[mmax],tilex],[dec[mmax],tiley],symbol='*',color='magenta',/overplot,/current,/data,linestyle='none');        tilex=x[mgrid0]+xx[mgrid1];        tiley=y[mgrid0]+yy[mgrid1]        ;; if z eq 0 then w=lindgen(n_elements(amap))        ;; if z ge 1 then begin         ;;    cdist=separation(ra,dec,xx[0],yy[0])/3600.        ;;    w=where(cdist ge 30)        ;; endif         ;; if z ge 2 then begin         ;;    dist1=separation(ra,dec,xx[1],yy[1])/3600.        ;;    w=where(cdist ge 30 and dist1 ge 30.)        ;; endif         ;; if z ge 3 then begin         ;;    dist2=separation(ra,dec,xx[2],yy[2])/3600.        ;;    w=where(cdist ge 30 and dist1 ge 30. and dist2 ge 30.)        ;; endif         ;; if z ge 4 then begin         ;;    dist3=separation(ra,dec,xx[3],yy[3])/3600.        ;;    w=where(cdist ge 30 and dist1 ge 30. and dist2 ge 30. and dist3 ge 30.)        ;; endif         ;; if z ge 5 then begin         ;;    dist4=separation(ra,dec,xx[4],yy[4])/3600.        ;;    w=where(cdist ge 30 and dist1 ge 30. and dist2 ge 30. and dist3 ge 30. and dist4 ge 30.)        ;; endif ;        if z eq 2 then p5=plot(ra[w],dec[w],symbol='dot',/overplot,/current,linestyle='none')        ;; maxpix=max(amap[w],mmax)        ;; mmax=w[mmax]        ;; tilex=ra[mmax]         ;; tiley=dec[mmax]        ;; xx[z]=tilex        ;; yy[z]=tiley        ;; print,tilex,tiley;        wdet=where(ra ge (tilex-15.*cos(tiley*!dtor)) and ra le (tilex+15.*cos(tiley*!dtor)) and dec ge tiley-15. and dec le tiley+15.);        print,tilex-15.*cos(tiley*!dtor),tilex+15.*cos(tiley*!dtor),tiley-15,tiley+15.        prob[z]=total(amap[wdet])/total(hmap)                amap[wdet]=0.;        p4=plot(ra[wdet],dec[wdet],symbol='dot',/overplot,/current,linestyle='none')        print,prob[z]        if prob[z] lt 0.02 then begin           prob[z]=0.            z=5        endif else begin           t=text(0.1+(z+1.)/10.,0.1,ntostr(prob[z],4));           rotate_square,ang,xxp,yyp,xc=tilex,yc=tiley ;[i]                   p=plot(xxp,yyp,/overplot,color='green',linestyle='none',symbol='circle',/sym_filled,sym_size=0.5)        endelse         if z eq 5 then t=text(0.2,0.05,'total='+ntostr(total(prob),4))     endfor      im.save,'~/iLobster/2014_proposal/'+ndet+'det_'+ntostr(det[j])+'.png';     k=get_kbrd(10);     if k eq 's' then stop     im.close  endfor;; algorithms tried;; 1 - search around max, remove tile area form prob, repeat - too;;     much tile overlap;; 2 - search around max, but force tile centers to eb 30 deg apart -;;     overlap, center on max, not maximize prob;; 3 - calc prob on sky grid, jiggle around box and use at max -;;     depends too much on original grid;; 4 - search around max, then jiggle to get optimized prob - still;;     have overlap, fixed with rotation?stop  returnend pro wfi_sens_compare  begplot,name='~/iLobster/2014_proposal/compare_ilobster.eps',/encap,font='helvetica',/color,/land  plot,[2004,2026],[8e-12,1e-9],/nodata,xtitle='Year',/ylog,/xsty,/ysty,charsize=2,yrange=[8e-12,1e-9],title='Full Sky Sensitivity in 1 day'  readcol,'~/iLobster/2014_proposal/lobster_sensitivity.dat',time, bcount, mcount, crabflux, grbflux, hgrbflux  lobtime=time  lobflux=grbflux  f2000=interpol(lobflux,lobtime,2000.)  xyouts,2000.3,3e-11,'0.3-5.0 keV Sensitivity',charsize=2,orient=90  xyouts,2001.4,5e-11,'(erg cm!U-2!Ns!U-1!N)',charsize=2,orient=90  ;;;lob,bat,maxi,asm  ltime=[2020,2022,2025];  lflux=1.24e-11  lflux=f2000  mtime=[2009.75,2016]  mflux=3.2e-10  btime=[2004.9,2014]  bflux=5e-10  atime=[1996,2011]  aflux=4e-10;  oplot,ltime,[lflux,lflux];  oplot,mtime,[mflux,mflux]  oplot,atime,[aflux,aflux],thick=10  xyouts,atime[0]+8.5,aflux*0.7,'RXTE/ASM',charsize=2  arrow,ltime[0],lflux,ltime[1],lflux,/data,thick=10,hsize=!D.X_SIZE / 64.  oplot,[ltime[1],ltime[2]],[lflux,lflux],line=2,thick=10  xyouts,ltime[0]-8,lflux*1.2,'ISS-Lobster/WFI',charsize=3.  arrow,btime[0],bflux,btime[1],bflux,/data,thick=10,hsize=!D.X_SIZE / 64.  xyouts,btime[0]+2.0,bflux*1.1,'Swift/BAT',charsize=2  arrow,mtime[0],mflux,mtime[1],mflux,/data,thick=11,hsize=!D.X_SIZE / 64.  xyouts,mtime[0]+1.4,mflux*0.7,'MAXI',charsize=2  endplot  spawn,'ps2pdf ~/iLobster/2014_proposal/compare_ilobster.eps ~/iLobster/2014_proposal/compare_ilobster.pdf'stop  return endpro ilobster_prop2014returnend 